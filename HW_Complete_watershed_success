# -*- coding: utf-8 -*-
"""
Created on Sun Jun 21 13:19:33 2020

@author: ken36
"""


import cv2
import numpy as np
font = cv2.FONT_HERSHEY_SIMPLEX 
ball_color = 'red'

color_dist = {'red': {'Lower': np.array([0, 60, 60]), 'Upper': np.array([10, 255, 255])},
              'blue': {'Lower': np.array([100, 80, 46]), 'Upper': np.array([124, 255, 255])},
              'green': {'Lower': np.array([35, 43, 35]), 'Upper': np.array([90, 255, 255])},
              }




imagepath = 'Tomato.jpg'
img = cv2.imread(imagepath, 1)
gs_frame = cv2.GaussianBlur(img, (5, 5), 0,0)
#cv2.imshow("gs_frame",gs_frame)
#cv2.imwrite("Tomato_gs_frame.jpg",gs_frame)                
hsv = cv2.cvtColor(gs_frame, cv2.COLOR_BGR2HSV)
#cv2.imshow("HSV", hsv)
#cv2.imwrite("Tomato_hsv.jpg", hsv)
erode_hsv = cv2.erode(hsv, None, iterations=2)
inRange_hsv = cv2.inRange(erode_hsv, color_dist[ball_color]['Lower'], color_dist[ball_color]['Upper'])
#cv2.imshow("inRange_hsv",inRange_hsv)
#cv2.imwrite("Tomato_inRange_hsv.jpg", inRange_hsv)
ret, thresh = cv2.threshold(inRange_hsv, 0, 255, cv2.THRESH_BINARY| cv2.THRESH_OTSU)
#cv2.imshow("thresh_1", thresh)
#cv2.imwrite("Tomato_final", img)
kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(5, 5))
first_try = cv2.erode(thresh, kernel, iterations=10)
cv2.imshow("first_try",first_try)
opening = cv2.morphologyEx(thresh,cv2.MORPH_CLOSE,kernel, iterations = 7)
#cv2.imshow("close", opening)
#cv2.imwrite("Tomato_close.jpg", opening)
opening1 = cv2.morphologyEx(opening,cv2.MORPH_OPEN,kernel, iterations = 11)
cv2.imshow("open1", opening1)
#cv2.imwrite("Tomato_open1.jpg", opening1)

kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(3, 3))
sure_bg1 = cv2.dilate(opening1,kernel,iterations=12)
#cv2.imshow("sure_bg1",sure_bg1)
#cv2.imwrite("Tomato_bg1.jpg", sure_bg1)
kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(7, 7))
opening2 = cv2.morphologyEx(sure_bg1,cv2.MORPH_OPEN,kernel, iterations = 10)
cv2.imshow("open2", opening2)
#cv2.imwrite("Tomato_open2.jpg", opening2)
dist_transform = cv2.distanceTransform(opening1,cv2.DIST_L2,5)
        #cv2.imshow("dist", dist_transform)
ret, sure_fg = cv2.threshold(dist_transform,0.7*dist_transform.max(),255,2)
        #cv2.imshow("sure_fg", sure_fg)
sure_fg = np.uint8(sure_fg)
unknown = cv2.subtract(opening2,first_try)
print(unknown)
        #cv2.imshow("unknown", unknown)
ret, markers = cv2.connectedComponents(first_try)
markers = markers+1
        
markers[unknown==255] = 0
        
markers = cv2.watershed(img,markers)
        #cv2.imshow("markers", markers)
img[markers == -1] = [255,0,0]


image, contours, hierarchy = cv2.findContours(markers, 2, 1)
        
for cnt in contours:
    (x2, y2, w2, h2) = cv2.boundingRect(cnt) 
            
    hull = cv2.convexHull(cnt)
    length = len(hull)
         
    if length > 5:
            
        for i in range(length):
            cv2.line(img, tuple(hull[i][0]), tuple(hull[(i+1)%length][0]), (0,0,255), 2)
            cv2.rectangle(img, (x2, y2), (x2 + w2, y2 + h2), (0, 255, 255), 2)
            cv2.putText(img, "OK", (x2, y2 - 5), font, 0.7, (0, 0, 255), 2) 
            

cv2.imshow('Tomato_test', img)
cv2.imwrite("Tomato_final.jpg", img)
cv2.waitKey(0)
cv2.destroyAllWindows()
